{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#HW 3\n",
    "\n",
    "#Vitor Melo\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.optimize as opt\n",
    "import scipy.interpolate as interp\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Question 1\n",
    "\n",
    "#A\n",
    "#Writing down the Bellman Equation as a function of state variable \"today\" and \"tomorrow\", we have:\n",
    "\n",
    "$V(W_{t})= u(W_{t}-W_{t+1})+\\beta[V(W_{t+1})]$\n",
    "\n",
    "Objective is to maximize utility over an infinite sequence of $W_{t+1}$ for all $_{t}$ such that \n",
    "\n",
    "$\\lim_{t \\to inf }e^{-\\rho*t}\\lambda_{t}k_{t+1} = 0$ (Transversality holds) such that $\\rho>g$, being g the growth rate of capital and and $\\rho$ being the discount rate\n",
    "\n",
    "Recursive approach (maximize future values to \"arrive\" to present values)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#B#\n",
    "\n",
    "Given our Bellman Equation exposed in A, assuming u(c)= log(c), and assuming our guess takes the form:\n",
    "\n",
    "$V(W)= A+ B*ln(W)$\n",
    "\n",
    "We can say that $A+B*ln(w)= ln(W_{t}-W_{t+1}) + \\beta*(A+Bln(W_{t+1}))$\n",
    "\n",
    "First-Order Conditions, gives us, then\n",
    "\n",
    "$W_{t+1}= \\frac{\\beta*B}{1+\\beta*B}*W_{t}$\n",
    "\n",
    "Getting ,finally, $B=1/(1-\\beta)$ after we get given the fact $\\frac{W_{t+1}}{W_{t}}=\\beta$ from FOC\n",
    "\n",
    "Similarly, it can be shown that A in our guess is \n",
    "\n",
    "$A= \\frac{\\beta*Bln(\\beta*B)}{1+\\beta*B}- \\frac{1+\\beta*B}{1+\\beta}$. Calculating A as a function of parameters from Bellman Equation and given $B=1/(1-\\beta)$, we have the following for A:\n",
    "\n",
    "$A= (ln(1-\\beta)+\\frac{\\beta}{1-\\beta}ln(\\beta))*1/(1-\\beta)$\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#C#\n",
    "\n",
    "Given our first order conditions we get:\n",
    "\n",
    "$W_{t+1}= g(w_{t})=\\frac{\\beta*B}{1+\\beta*B} $\n",
    "\n",
    "Substituting B from #B# in the policy equation, we get $\\beta*W_{t}$ or $c_{t}= (1-\\beta)*W_{t}$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#D#\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.optimize as opt\n",
    "import scipy.interpolate as interp\n",
    "\n",
    "#Setting up state space\n",
    "beta = 0.95\n",
    "grid_max = 4.99\n",
    "grid_min = 0.01\n",
    "grid_size= 100\n",
    "grid = np.linspace(grid_min, grid_max, grid_size)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting closed form solutions\n",
    "B = 1/(1-beta)\n",
    "A = ((beta*B*np.log((beta*B)/(1 + (beta*B)))) - np.log(1 + (beta*B)))/(1-beta)\n",
    "truev = A + B*np.log(grid)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating w_t+1 vector\n",
    "w1 = np.linspace(0, 100, 100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using  initial guess of value function to get maximum w_t+1\n",
    "def V1(w):\n",
    "    return (np.log(grid[i]-w) + beta*w) *-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#used after initial guess for finding maximum w_t+1\n",
    "def Bellman(w):\n",
    "    return (np.log(grid[i]-w) + beta*iv1(w)) *-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loop  \n",
    "for k in range(1000):  #Ran it multiple times\n",
    "    if k == 0: #Firs run attempt with initial guess\n",
    "        for i in range(100): #finding the max w_t+1 for each state \n",
    "            optim = opt.fminbound(V1,0,grid[i])\n",
    "            #print(optim)\n",
    "            w1[i] = optim\n",
    "        v1 = np.log(grid - w1) + beta*w1 #solving for the value function values for each state \n",
    "    else: #after our initial guess\n",
    "        for i in range(100):\n",
    "            optim = opt.fminbound(Bellman,0,grid[i])\n",
    "            #print(optim)\n",
    "            w1[i] = optim\n",
    "        v1 = np.log(grid - w1) + beta*iv1(w1) #solving for value function values for state \n",
    "    iv1 = interp.InterpolatedUnivariateSpline(grid,v1) #fit  function to the value function points\n",
    "    "
   ]
  },
 
